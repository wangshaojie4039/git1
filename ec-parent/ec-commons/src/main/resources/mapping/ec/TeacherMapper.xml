<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.imexue.ec.common.mapper.ec.TeacherMapper" >
  
  <sql id="baseColumn">
  	t.id,t.mobile,t.name,t.logo_url,t.sex,t.birthday,
  	t.has_login,t.is_active,t.version_no,t.create_time
  </sql>
  
  <select id="pageList" resultType="teachervo">
  	select <include refid="baseColumn"/>,m.role,m.school_id
  	FROM t_teacher t
  	LEFT JOIN t_teacher_school_map m on t.id = m.teacher_id
  	WHERE  m.school_id = #{schoolId}
  	<if test="mobile != null">
    and t.mobile like concat('%',#{mobile},'%')
  	</if>
  	<if test="orderBy != null">
	  	<if test="orderBy == 'id'">
	  	ORDER BY m.create_time DESC
	  	</if>
	  	<if test="orderBy != 'id'">
	  	ORDER BY ${orderBy} ${orderType}
	  	</if>
  	</if>
  </select>
  
  <select id="getTeacherByClass" resultType="teachervo">
  	select <include refid="baseColumn"/>,ctm.is_master
  	from `t_teacher` t
  	left join `t_class_teacher_map` ctm on ctm.teacher_id = t.id
  	where ctm.class_id = #{classId}
  </select>
  <!--  获取当前登录用户-->
   <select id="findUserById" resultType="TeacherTransVo">
  	select t.uid,t.password
  	from `t_teacher` t
   	where  t.id = #{id} 
  </select>
  
  <select id="getTeacherById" resultType="teachervo">
  select <include refid="baseColumn"/>,t.uid,t.password,tsm.school_id,tsm.role
  from `t_teacher` t
  left join `t_teacher_school_map` tsm on tsm.teacher_id = t.id
  where  t.id = #{id} 
  <if test="schoolId != null">
  and tsm.school_id = #{schoolId}
  </if>
  limit 1
  </select>
  
  
  <!-- 根据ID查询老师基本信息 -->
  <select id="getById" resultType="TeacherInfoVo">
		  select t.name,t.mobile
		  from `t_teacher` t
 		  where  t.id = #{id} 
  </select>
  <!-- 根据学校获取基本班级学校列表 -->
   <select id="findAllBySchoolId" resultType="TeacherInfoVo">
		  select t.id , t.name,t.mobile
		  from `t_teacher` t
		  left join `t_teacher_school_map` tsm on tsm.teacher_id = t.id
 		  where  tsm.school_id = #{schoolId} 
 	</select>
  
  <select id="getTeacherByUsername" resultType="teachervo">
  select <include refid="baseColumn"/>,tsm.school_id
  from `t_teacher` t
  left join `t_teacher_school_map` tsm on tsm.teacher_id = t.id
  where t.mobile = #{username}
  limit 1
  </select>
  
  <select id="getTeacherByUsernameOrName" resultType="teachervo">
  select <include refid="baseColumn"/>,tsm.school_id
  from `t_teacher` t
  left join `t_teacher_school_map` tsm on tsm.teacher_id = t.id
  where tsm.school_id = #{schoolId}
  <if test="username != null">
  (t.mobile like concat('%',#{username},'%')
  or t.name like concat('%',#{username},'%') )
  </if>
  </select>
  
  
  <update id="updateTeacher">
  update t_teacher t, t_teacher_school_map tsm 
  set tsm.role = #{role}
  ,name = #{teacher.name}
  <if test="teacher.logoUrl != null">
  ,logo_url = #{teacher.logoUrl}
  </if>
  ,sex = #{teacher.sex}
  ,birthday = #{teacher.birthday}
  ,version_no = version_no+1
  where tsm.teacher_id = #{teacher.id}
  <if test="schoolId != null">
  and tsm.school_id=#{schoolId}
  </if>
  and t.id = #{teacher.id}
  and t.version_no = #{teacher.versionNo}
  </update>
  
  <update id="removeTeacher">
  DELETE FROM t_teacher_school_map  
  WHERE teacher_id=#{teacherId} AND school_id =#{schoolId}
  </update>
  
  <insert id="insertTeacher" keyProperty="id">
  insert into t_teacher
  (mobile,uid,uuid,password,name,logo_url,sex,birthday,is_active,create_time,creator_role,creator_id)
  values
  (#{mobile},#{uid},#{uuid},#{password},#{name},#{logoUrl},#{sex},#{birthday},
  1,#{createTime},#{creatorRole},#{creatorId} )
  </insert>
  
  <insert id="insertTeacherSchool" keyProperty="id">
  insert into t_teacher_school_map
  (school_id,teacher_id,role,create_time,creator_role,creator_id)
  values
  (#{schoolId},#{teacherId},#{role},#{createTime},#{creatorRole},#{creatorId})
  </insert>
  
  <update id="updateUserInfoForOtherTable" statementType="CALLABLE" >
	  	{call updateUserInfoForOtherTable( 
	        #{userId,jdbcType=BIGINT,mode=IN},  
	        'T', 
	        #{userName,jdbcType=VARCHAR,mode=IN}, 
	        #{logoUrl,jdbcType=VARCHAR,mode=IN}
	    )}
  </update>
  
  
  
</mapper>